{"version":3,"file":"mini-rsa.dev.js","sources":["../node_modules/core-js/library/modules/_core.js","../node_modules/core-js/library/fn/json/stringify.js","../node_modules/@babel/runtime-corejs2/core-js/json/stringify.js","../src/lib/MiniRSA.js"],"sourcesContent":["var core = module.exports = { version: '2.6.9' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n","var core = require('../../modules/_core');\nvar $JSON = core.JSON || (core.JSON = { stringify: JSON.stringify });\nmodule.exports = function stringify(it) { // eslint-disable-line no-unused-vars\n  return $JSON.stringify.apply($JSON, arguments);\n};\n","module.exports = require(\"core-js/library/fn/json/stringify\");","/*!\r\n * RSA library for Node.js\r\n *\r\n * Author: rzcoder\r\n * License MIT\r\n */\r\n\r\nvar constants = require('constants');\r\nvar rsa = require('./libs/rsa.js');\r\nvar crypt = require('crypto');\r\nvar ber = require('asn1').Ber;\r\nvar _ = require('./utils')._;\r\nvar utils = require('./utils');\r\nvar schemes = require('./schemes/schemes.js');\r\nvar formats = require('./formats/formats.js');\r\n\r\nif (typeof constants.RSA_NO_PADDING === \"undefined\") {\r\n    //patch for node v0.10.x, constants do not defined\r\n    constants.RSA_NO_PADDING = 3;\r\n}\r\n\r\nexport default (function () {\r\n    var SUPPORTED_HASH_ALGORITHMS = {\r\n        node10: ['md4', 'md5', 'ripemd160', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512'],\r\n        node: ['md4', 'md5', 'ripemd160', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512'],\r\n        iojs: ['md4', 'md5', 'ripemd160', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512'],\r\n        browser: ['md5', 'ripemd160', 'sha1', 'sha256', 'sha512']\r\n    };\r\n\r\n    var DEFAULT_ENCRYPTION_SCHEME = 'pkcs1_oaep';\r\n    var DEFAULT_SIGNING_SCHEME = 'pkcs1';\r\n\r\n    var DEFAULT_EXPORT_FORMAT = 'private';\r\n    var EXPORT_FORMAT_ALIASES = {\r\n        'private': 'pkcs1-private-pem',\r\n        'private-der': 'pkcs1-private-der',\r\n        'public': 'pkcs8-public-pem',\r\n        'public-der': 'pkcs8-public-der',\r\n    };\r\n\r\n    /**\r\n     * @param key {string|buffer|object} Key in PEM format, or data for generate key {b: bits, e: exponent}\r\n     * @constructor\r\n     */\r\n    function NodeRSA(key, format, options) {\r\n        if (!(this instanceof NodeRSA)) {\r\n            return new NodeRSA(key, format, options);\r\n        }\r\n\r\n        if (_.isObject(format)) {\r\n            options = format;\r\n            format = undefined;\r\n        }\r\n\r\n        this.$options = {\r\n            signingScheme: DEFAULT_SIGNING_SCHEME,\r\n            signingSchemeOptions: {\r\n                hash: 'sha256',\r\n                saltLength: null\r\n            },\r\n            encryptionScheme: DEFAULT_ENCRYPTION_SCHEME,\r\n            encryptionSchemeOptions: {\r\n                hash: 'sha1',\r\n                label: null\r\n            },\r\n            environment: utils.detectEnvironment(),\r\n            rsaUtils: this\r\n        };\r\n        this.keyPair = new rsa.Key();\r\n        this.$cache = {};\r\n\r\n        if (Buffer.isBuffer(key) || _.isString(key)) {\r\n            this.importKey(key, format);\r\n        } else if (_.isObject(key)) {\r\n            this.generateKeyPair(key.b, key.e);\r\n        }\r\n\r\n        this.setOptions(options);\r\n    }\r\n\r\n    /**\r\n     * Set and validate options for key instance\r\n     * @param options\r\n     */\r\n    NodeRSA.prototype.setOptions = function (options) {\r\n        options = options || {};\r\n        if (options.environment) {\r\n            this.$options.environment = options.environment;\r\n        }\r\n\r\n        if (options.signingScheme) {\r\n            if (_.isString(options.signingScheme)) {\r\n                var signingScheme = options.signingScheme.toLowerCase().split('-');\r\n                if (signingScheme.length == 1) {\r\n                    if (SUPPORTED_HASH_ALGORITHMS.node.indexOf(signingScheme[0]) > -1) {\r\n                        this.$options.signingSchemeOptions = {\r\n                            hash: signingScheme[0]\r\n                        };\r\n                        this.$options.signingScheme = DEFAULT_SIGNING_SCHEME;\r\n                    } else {\r\n                        this.$options.signingScheme = signingScheme[0];\r\n                        this.$options.signingSchemeOptions = {\r\n                            hash: null\r\n                        };\r\n                    }\r\n                } else {\r\n                    this.$options.signingSchemeOptions = {\r\n                        hash: signingScheme[1]\r\n                    };\r\n                    this.$options.signingScheme = signingScheme[0];\r\n                }\r\n            } else if (_.isObject(options.signingScheme)) {\r\n                this.$options.signingScheme = options.signingScheme.scheme || DEFAULT_SIGNING_SCHEME;\r\n                this.$options.signingSchemeOptions = _.omit(options.signingScheme, 'scheme');\r\n            }\r\n\r\n            if (!schemes.isSignature(this.$options.signingScheme)) {\r\n                throw Error('Unsupported signing scheme');\r\n            }\r\n\r\n            if (this.$options.signingSchemeOptions.hash &&\r\n                SUPPORTED_HASH_ALGORITHMS[this.$options.environment].indexOf(this.$options.signingSchemeOptions.hash) === -1) {\r\n                throw Error('Unsupported hashing algorithm for ' + this.$options.environment + ' environment');\r\n            }\r\n        }\r\n\r\n        if (options.encryptionScheme) {\r\n            if (_.isString(options.encryptionScheme)) {\r\n                this.$options.encryptionScheme = options.encryptionScheme.toLowerCase();\r\n                this.$options.encryptionSchemeOptions = {};\r\n            } else if (_.isObject(options.encryptionScheme)) {\r\n                this.$options.encryptionScheme = options.encryptionScheme.scheme || DEFAULT_ENCRYPTION_SCHEME;\r\n                this.$options.encryptionSchemeOptions = _.omit(options.encryptionScheme, 'scheme');\r\n            }\r\n\r\n            if (!schemes.isEncryption(this.$options.encryptionScheme)) {\r\n                throw Error('Unsupported encryption scheme');\r\n            }\r\n\r\n            if (this.$options.encryptionSchemeOptions.hash &&\r\n                SUPPORTED_HASH_ALGORITHMS[this.$options.environment].indexOf(this.$options.encryptionSchemeOptions.hash) === -1) {\r\n                throw Error('Unsupported hashing algorithm for ' + this.$options.environment + ' environment');\r\n            }\r\n        }\r\n\r\n        this.keyPair.setOptions(this.$options);\r\n    };\r\n\r\n    /**\r\n     * Generate private/public keys pair\r\n     *\r\n     * @param bits {int} length key in bits. Default 2048.\r\n     * @param exp {int} public exponent. Default 65537.\r\n     * @returns {NodeRSA}\r\n     */\r\n    NodeRSA.prototype.generateKeyPair = function (bits, exp) {\r\n        bits = bits || 2048;\r\n        exp = exp || 65537;\r\n\r\n        if (bits % 8 !== 0) {\r\n            throw Error('Key size must be a multiple of 8.');\r\n        }\r\n\r\n        this.keyPair.generate(bits, exp.toString(16));\r\n        this.$cache = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Importing key\r\n     * @param keyData {string|buffer|Object}\r\n     * @param format {string}\r\n     */\r\n    NodeRSA.prototype.importKey = function (keyData, format) {\r\n        if (!keyData) {\r\n            throw Error(\"Empty key given\");\r\n        }\r\n\r\n        if (format) {\r\n            format = EXPORT_FORMAT_ALIASES[format] || format;\r\n        }\r\n\r\n        if (!formats.detectAndImport(this.keyPair, keyData, format) && format === undefined) {\r\n            throw Error(\"Key format must be specified\");\r\n        }\r\n        \r\n        this.$cache = {};\r\n        \r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Exporting key\r\n     * @param [format] {string}\r\n     */\r\n    NodeRSA.prototype.exportKey = function (format) {\r\n        format = format || DEFAULT_EXPORT_FORMAT;\r\n        format = EXPORT_FORMAT_ALIASES[format] || format;\r\n\r\n        if (!this.$cache[format]) {\r\n            this.$cache[format] = formats.detectAndExport(this.keyPair, format);\r\n        }\r\n\r\n        return this.$cache[format];\r\n    };\r\n\r\n    /**\r\n     * Check if key pair contains private key\r\n     */\r\n    NodeRSA.prototype.isPrivate = function () {\r\n        return this.keyPair.isPrivate();\r\n    };\r\n\r\n    /**\r\n     * Check if key pair contains public key\r\n     * @param [strict] {boolean} - public key only, return false if have private exponent\r\n     */\r\n    NodeRSA.prototype.isPublic = function (strict) {\r\n        return this.keyPair.isPublic(strict);\r\n    };\r\n\r\n    /**\r\n     * Check if key pair doesn't contains any data\r\n     */\r\n    NodeRSA.prototype.isEmpty = function (strict) {\r\n        return !(this.keyPair.n || this.keyPair.e || this.keyPair.d);\r\n    };\r\n\r\n    /**\r\n     * Encrypting data method with public key\r\n     *\r\n     * @param buffer {string|number|object|array|Buffer} - data for encrypting. Object and array will convert to JSON string.\r\n     * @param encoding {string} - optional. Encoding for output result, may be 'buffer', 'binary', 'hex' or 'base64'. Default 'buffer'.\r\n     * @param source_encoding {string} - optional. Encoding for given string. Default utf8.\r\n     * @returns {string|Buffer}\r\n     */\r\n    NodeRSA.prototype.encrypt = function (buffer, encoding, source_encoding) {\r\n        return this.$$encryptKey(false, buffer, encoding, source_encoding);\r\n    };\r\n\r\n    /**\r\n     * Decrypting data method with private key\r\n     *\r\n     * @param buffer {Buffer} - buffer for decrypting\r\n     * @param encoding - encoding for result string, can also take 'json' or 'buffer' for the automatic conversion of this type\r\n     * @returns {Buffer|object|string}\r\n     */\r\n    NodeRSA.prototype.decrypt = function (buffer, encoding) {\r\n        return this.$$decryptKey(false, buffer, encoding);\r\n    };\r\n\r\n    /**\r\n     * Encrypting data method with private key\r\n     *\r\n     * Parameters same as `encrypt` method\r\n     */\r\n    NodeRSA.prototype.encryptPrivate = function (buffer, encoding, source_encoding) {\r\n        return this.$$encryptKey(true, buffer, encoding, source_encoding);\r\n    };\r\n\r\n    /**\r\n     * Decrypting data method with public key\r\n     *\r\n     * Parameters same as `decrypt` method\r\n     */\r\n    NodeRSA.prototype.decryptPublic = function (buffer, encoding) {\r\n        return this.$$decryptKey(true, buffer, encoding);\r\n    };\r\n\r\n    /**\r\n     * Encrypting data method with custom key\r\n     */\r\n    NodeRSA.prototype.$$encryptKey = function (usePrivate, buffer, encoding, source_encoding) {\r\n        try {\r\n            var res = this.keyPair.encrypt(this.$getDataForEncrypt(buffer, source_encoding), usePrivate);\r\n\r\n            if (encoding == 'buffer' || !encoding) {\r\n                return res;\r\n            } else {\r\n                return res.toString(encoding);\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n            throw Error('Error during encryption. Original error: ' + e);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Decrypting data method with custom key\r\n     */\r\n    NodeRSA.prototype.$$decryptKey = function (usePublic, buffer, encoding) {\r\n        try {\r\n            buffer = _.isString(buffer) ? Buffer.from(buffer, 'base64') : buffer;\r\n            var res = this.keyPair.decrypt(buffer, usePublic);\r\n\r\n            if (res === null) {\r\n                throw Error('Key decrypt method returns null.');\r\n            }\r\n\r\n            return this.$getDecryptedData(res, encoding);\r\n        } catch (e) {\r\n            throw Error('Error during decryption (probably incorrect key). Original error: ' + e);\r\n        }\r\n    };\r\n\r\n    /**\r\n     *  Signing data\r\n     *\r\n     * @param buffer {string|number|object|array|Buffer} - data for signing. Object and array will convert to JSON string.\r\n     * @param encoding {string} - optional. Encoding for output result, may be 'buffer', 'binary', 'hex' or 'base64'. Default 'buffer'.\r\n     * @param source_encoding {string} - optional. Encoding for given string. Default utf8.\r\n     * @returns {string|Buffer}\r\n     */\r\n    NodeRSA.prototype.sign = function (buffer, encoding, source_encoding) {\r\n        if (!this.isPrivate()) {\r\n            throw Error(\"This is not private key\");\r\n        }\r\n\r\n        var res = this.keyPair.sign(this.$getDataForEncrypt(buffer, source_encoding));\r\n\r\n        if (encoding && encoding != 'buffer') {\r\n            res = res.toString(encoding);\r\n        }\r\n\r\n        return res;\r\n    };\r\n\r\n    /**\r\n     *  Verifying signed data\r\n     *\r\n     * @param buffer - signed data\r\n     * @param signature\r\n     * @param source_encoding {string} - optional. Encoding for given string. Default utf8.\r\n     * @param signature_encoding - optional. Encoding of given signature. May be 'buffer', 'binary', 'hex' or 'base64'. Default 'buffer'.\r\n     * @returns {*}\r\n     */\r\n    NodeRSA.prototype.verify = function (buffer, signature, source_encoding, signature_encoding) {\r\n        if (!this.isPublic()) {\r\n            throw Error(\"This is not public key\");\r\n        }\r\n        signature_encoding = (!signature_encoding || signature_encoding == 'buffer' ? null : signature_encoding);\r\n        return this.keyPair.verify(this.$getDataForEncrypt(buffer, source_encoding), signature, signature_encoding);\r\n    };\r\n\r\n    /**\r\n     * Returns key size in bits\r\n     * @returns {int}\r\n     */\r\n    NodeRSA.prototype.getKeySize = function () {\r\n        return this.keyPair.keySize;\r\n    };\r\n\r\n    /**\r\n     * Returns max message length in bytes (for 1 chunk) depending on current encryption scheme\r\n     * @returns {int}\r\n     */\r\n    NodeRSA.prototype.getMaxMessageSize = function () {\r\n        return this.keyPair.maxMessageLength;\r\n    };\r\n\r\n    /**\r\n     * Preparing given data for encrypting/signing. Just make new/return Buffer object.\r\n     *\r\n     * @param buffer {string|number|object|array|Buffer} - data for encrypting. Object and array will convert to JSON string.\r\n     * @param encoding {string} - optional. Encoding for given string. Default utf8.\r\n     * @returns {Buffer}\r\n     */\r\n    NodeRSA.prototype.$getDataForEncrypt = function (buffer, encoding) {\r\n        if (_.isString(buffer) || _.isNumber(buffer)) {\r\n            return Buffer.from('' + buffer, encoding || 'utf8');\r\n        } else if (Buffer.isBuffer(buffer)) {\r\n            return buffer;\r\n        } else if (_.isObject(buffer)) {\r\n            return Buffer.from(JSON.stringify(buffer));\r\n        } else {\r\n            throw Error(\"Unexpected data type\");\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param buffer {Buffer} - decrypted data.\r\n     * @param encoding - optional. Encoding for result output. May be 'buffer', 'json' or any of Node.js Buffer supported encoding.\r\n     * @returns {*}\r\n     */\r\n    NodeRSA.prototype.$getDecryptedData = function (buffer, encoding) {\r\n        encoding = encoding || 'buffer';\r\n\r\n        if (encoding == 'buffer') {\r\n            return buffer;\r\n        } else if (encoding == 'json') {\r\n            return JSON.parse(buffer.toString());\r\n        } else {\r\n            return buffer.toString(encoding);\r\n        }\r\n    };\r\n\r\n    return NodeRSA;\r\n})();\r\n"],"names":["core","require$$0","constants","require","rsa","crypt","ber","Ber","_","utils","schemes","formats","RSA_NO_PADDING","NodeRSA","key","format","options","isObject","$options","signingScheme","DEFAULT_SIGNING_SCHEME","signingSchemeOptions","hash","saltLength","encryptionScheme","DEFAULT_ENCRYPTION_SCHEME","encryptionSchemeOptions","label","environment","detectEnvironment","rsaUtils","keyPair","Key","$cache","Buffer","isBuffer","isString","importKey","generateKeyPair","b","e","setOptions","SUPPORTED_HASH_ALGORITHMS","node10","node","iojs","browser","EXPORT_FORMAT_ALIASES","prototype","toLowerCase","split","length","indexOf","scheme","omit","isSignature","Error","isEncryption","bits","exp","generate","toString","keyData","detectAndImport","exportKey","detectAndExport","isPrivate","isPublic","strict","isEmpty","n","d","encrypt","buffer","encoding","source_encoding","$$encryptKey","decrypt","$$decryptKey","encryptPrivate","decryptPublic","usePrivate","res","$getDataForEncrypt","console","log","usePublic","from","$getDecryptedData","sign","verify","signature","signature_encoding","getKeySize","keySize","getMaxMessageSize","maxMessageLength","isNumber","_JSON$stringify","JSON","parse"],"mappings":"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"}